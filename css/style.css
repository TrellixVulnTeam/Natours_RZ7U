@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
    /* negative value means it will start from the left side to the right*/ }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translateY(0); } }

/* Animations using keyframes and transform property*/
/* The animation can be used anywhere after it is defined
 */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /* Good practice */ }

html {
  font-size: 62.5%;
  /* Good practice */ }

body {
  box-sizing: border-box;
  /* Good practice */ }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 1.6rem;
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /* Always use this to hide animation shaky effect */
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    /* Since span elems are inline by default, 
    we will change them to block in order for each to take a full line length  */
    font-size: 6rem;
    font-weight: 700;
    letter-spacing: 3.5rem;
    animation: moveInLeft 3s;
    /* 
    other possible props:
    animation-iteration-count: 3;
    animation-delay: 3s;
    animation-timing-function: ease-out;
    */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 3s;
    /* animation: moveInRight;
    animation-duration: 3s; */ }

.row {
  max-width: 114rem;
  background-color: #eee;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    background-color: orangered;
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 12rem) / 3); }
  .row .col-2-of-3 {
    width: calc( ((100% - 12rem) / 3) * 2 + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 18rem) / 4); }
  .row .col-2-of-4 {
    width: calc((100% - 6rem) / 2); }
  .row .col-3-of-4 {
    width: calc( ((100% - 18rem) / 4) * 3 + 12rem); }

.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  /*sets the size of the element's background image  */
  background-position: top;
  /* sets the initial position for each background image. */
  /* To specify gradient, use the background image */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* creates a clipping region that sets what part of an element should be shown */
  position: relative; }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    /* background-color: rebeccapurple; */
    transform: translate(-50%, -50%);
    /* To center the text-box element relative to the header container */
    text-align: center; }

.btn:link, .btn:visited {
  display: inline-block;
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  border-radius: 10rem;
  transition: all 0.2s;
  /* should be on the intital state */
  position: relative;
  font-size: 1.6rem; }

.btn:hover {
  transform: translateY(-3px);
  /* negative value means it will start from the down to the up direction*/
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
  .btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0; }

.btn:active {
  transform: translateY(-1px);
  /* active state is when the button is clicked */
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn--white {
  background-color: #fff;
  color: #777; }
  .btn--white::after {
    background-color: #fff; }

.btn::after {
  content: "";
  /* You must specify the content property in order for an after pseudo to show on the page */
  display: inline-block;
  height: 100%;
  /* i.e 100% of the size of the button itself for both height and width. Same dimension */
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s; }

.btn--animated {
  animation: moveInBottom 2s ease-out;
  animation-fill-mode: backwards; }

/*
COLORS:
Grey ; #777;
Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/
/* 
1. The best way to perform basic reset using universal selector 
2. How to set project-wide font definitions
3. How to clip parts of elements using clip-path*/
